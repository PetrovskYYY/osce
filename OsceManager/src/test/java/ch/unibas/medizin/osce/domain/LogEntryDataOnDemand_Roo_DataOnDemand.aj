// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.LogEntry;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect LogEntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LogEntryDataOnDemand: @Component;
    
    private Random LogEntryDataOnDemand.rnd = new SecureRandom();
    
    private List<LogEntry> LogEntryDataOnDemand.data;
    
    public LogEntry LogEntryDataOnDemand.getNewTransientLogEntry(int index) {
        LogEntry obj = new LogEntry();
        setLogtime(obj, index);
        setNewValue(obj, index);
        setOldValue(obj, index);
        setShibId(obj, index);
        return obj;
    }
    
    public void LogEntryDataOnDemand.setLogtime(LogEntry obj, int index) {
        Date logtime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLogtime(logtime);
    }
    
    public void LogEntryDataOnDemand.setNewValue(LogEntry obj, int index) {
        String newValue = "newValue_" + index;
        if (newValue.length() > 255) {
            newValue = newValue.substring(0, 255);
        }
        obj.setNewValue(newValue);
    }
    
    public void LogEntryDataOnDemand.setOldValue(LogEntry obj, int index) {
        String oldValue = "oldValue_" + index;
        if (oldValue.length() > 255) {
            oldValue = oldValue.substring(0, 255);
        }
        obj.setOldValue(oldValue);
    }
    
    public void LogEntryDataOnDemand.setShibId(LogEntry obj, int index) {
        Integer shibId = new Integer(index);
        obj.setShibId(shibId);
    }
    
    public LogEntry LogEntryDataOnDemand.getSpecificLogEntry(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        LogEntry obj = data.get(index);
        return LogEntry.findLogEntry(obj.getId());
    }
    
    public LogEntry LogEntryDataOnDemand.getRandomLogEntry() {
        init();
        LogEntry obj = data.get(rnd.nextInt(data.size()));
        return LogEntry.findLogEntry(obj.getId());
    }
    
    public boolean LogEntryDataOnDemand.modifyLogEntry(LogEntry obj) {
        return false;
    }
    
    public void LogEntryDataOnDemand.init() {
        data = LogEntry.findLogEntryEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'LogEntry' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.LogEntry>();
        for (int i = 0; i < 10; i++) {
            LogEntry obj = getNewTransientLogEntry(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
