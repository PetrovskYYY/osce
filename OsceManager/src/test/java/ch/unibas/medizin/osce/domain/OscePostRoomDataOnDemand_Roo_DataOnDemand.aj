// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.Course;
import ch.unibas.medizin.osce.domain.CourseDataOnDemand;
import ch.unibas.medizin.osce.domain.OscePost;
import ch.unibas.medizin.osce.domain.OscePostDataOnDemand;
import ch.unibas.medizin.osce.domain.OscePostRoom;
import ch.unibas.medizin.osce.domain.Room;
import ch.unibas.medizin.osce.domain.RoomDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OscePostRoomDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OscePostRoomDataOnDemand: @Component;
    
    private Random OscePostRoomDataOnDemand.rnd = new SecureRandom();
    
    private List<OscePostRoom> OscePostRoomDataOnDemand.data;
    
    @Autowired
    private CourseDataOnDemand OscePostRoomDataOnDemand.courseDataOnDemand;
    
    @Autowired
    private OscePostDataOnDemand OscePostRoomDataOnDemand.oscePostDataOnDemand;
    
    @Autowired
    private RoomDataOnDemand OscePostRoomDataOnDemand.roomDataOnDemand;
    
    public OscePostRoom OscePostRoomDataOnDemand.getNewTransientOscePostRoom(int index) {
        OscePostRoom obj = new OscePostRoom();
        setCourse(obj, index);
        setOscePost(obj, index);
        setRoom(obj, index);
        return obj;
    }
    
    public void OscePostRoomDataOnDemand.setCourse(OscePostRoom obj, int index) {
        Course course = courseDataOnDemand.getRandomCourse();
        obj.setCourse(course);
    }
    
    public void OscePostRoomDataOnDemand.setOscePost(OscePostRoom obj, int index) {
        OscePost oscePost = oscePostDataOnDemand.getRandomOscePost();
        obj.setOscePost(oscePost);
    }
    
    public void OscePostRoomDataOnDemand.setRoom(OscePostRoom obj, int index) {
        Room room = roomDataOnDemand.getRandomRoom();
        obj.setRoom(room);
    }
    
    public OscePostRoom OscePostRoomDataOnDemand.getSpecificOscePostRoom(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        OscePostRoom obj = data.get(index);
        return OscePostRoom.findOscePostRoom(obj.getId());
    }
    
    public OscePostRoom OscePostRoomDataOnDemand.getRandomOscePostRoom() {
        init();
        OscePostRoom obj = data.get(rnd.nextInt(data.size()));
        return OscePostRoom.findOscePostRoom(obj.getId());
    }
    
    public boolean OscePostRoomDataOnDemand.modifyOscePostRoom(OscePostRoom obj) {
        return false;
    }
    
    public void OscePostRoomDataOnDemand.init() {
        data = OscePostRoom.findOscePostRoomEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'OscePostRoom' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.OscePostRoom>();
        for (int i = 0; i < 10; i++) {
            OscePostRoom obj = getNewTransientOscePostRoom(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
