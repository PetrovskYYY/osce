// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.OscePost;
import ch.unibas.medizin.osce.domain.RoleTopic;
import ch.unibas.medizin.osce.domain.RoleTopicDataOnDemand;
import java.lang.Boolean;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OscePostDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OscePostDataOnDemand: @Component;
    
    private Random OscePostDataOnDemand.rnd = new SecureRandom();
    
    private List<OscePost> OscePostDataOnDemand.data;
    
    @Autowired
    private RoleTopicDataOnDemand OscePostDataOnDemand.roleTopicDataOnDemand;
    
    public OscePost OscePostDataOnDemand.getNewTransientOscePost(int index) {
        OscePost obj = new OscePost();
        setIsPossibleStart(obj, index);
        setNextPost(obj, index);
        setRoleTopic(obj, index);
        return obj;
    }
    
    public void OscePostDataOnDemand.setIsPossibleStart(OscePost obj, int index) {
        Boolean isPossibleStart = Boolean.TRUE;
        obj.setIsPossibleStart(isPossibleStart);
    }
    
    public void OscePostDataOnDemand.setNextPost(OscePost obj, int index) {
        OscePost nextPost = obj;
        obj.setNextPost(nextPost);
    }
    
    public void OscePostDataOnDemand.setRoleTopic(OscePost obj, int index) {
        RoleTopic roleTopic = roleTopicDataOnDemand.getRandomRoleTopic();
        obj.setRoleTopic(roleTopic);
    }
    
    public OscePost OscePostDataOnDemand.getSpecificOscePost(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        OscePost obj = data.get(index);
        return OscePost.findOscePost(obj.getId());
    }
    
    public OscePost OscePostDataOnDemand.getRandomOscePost() {
        init();
        OscePost obj = data.get(rnd.nextInt(data.size()));
        return OscePost.findOscePost(obj.getId());
    }
    
    public boolean OscePostDataOnDemand.modifyOscePost(OscePost obj) {
        return false;
    }
    
    public void OscePostDataOnDemand.init() {
        data = OscePost.findOscePostEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'OscePost' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ch.unibas.medizin.osce.domain.OscePost>();
        for (int i = 0; i < 10; i++) {
            OscePost obj = getNewTransientOscePost(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
