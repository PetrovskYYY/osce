// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unibas.medizin.osce.domain;

import ch.unibas.medizin.osce.domain.ClinicDataOnDemand;
import ch.unibas.medizin.osce.domain.Doctor;
import ch.unibas.medizin.osce.domain.OfficeDataOnDemand;
import ch.unibas.medizin.osce.domain.SpecialisationDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DoctorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DoctorDataOnDemand: @Component;
    
    private Random DoctorDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Doctor> DoctorDataOnDemand.data;
    
    @Autowired
    private ClinicDataOnDemand DoctorDataOnDemand.clinicDataOnDemand;
    
    @Autowired
    private OfficeDataOnDemand DoctorDataOnDemand.officeDataOnDemand;
    
    @Autowired
    private SpecialisationDataOnDemand DoctorDataOnDemand.specialisationDataOnDemand;
    
    public Doctor DoctorDataOnDemand.getNewTransientDoctor(int index) {
        ch.unibas.medizin.osce.domain.Doctor obj = new ch.unibas.medizin.osce.domain.Doctor();
        setGender(obj, index);
        setTitle(obj, index);
        setName(obj, index);
        setPreName(obj, index);
        setEmail(obj, index);
        setTelephone(obj, index);
        setClinic(obj, index);
        setOffice(obj, index);
        setIsActive(obj, index);
        setSpecialisation(obj, index);
        return obj;
    }
    
    private void DoctorDataOnDemand.setGender(Doctor obj, int index) {
        ch.unibas.medizin.osce.shared.Gender gender = ch.unibas.medizin.osce.shared.Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    private void DoctorDataOnDemand.setTitle(Doctor obj, int index) {
        java.lang.String title = "title_" + index;
        if (title.length() > 40) {
            title = title.substring(0, 40);
        }
        obj.setTitle(title);
    }
    
    private void DoctorDataOnDemand.setName(Doctor obj, int index) {
        java.lang.String name = "name_" + index;
        if (name.length() > 40) {
            name = name.substring(0, 40);
        }
        obj.setName(name);
    }
    
    private void DoctorDataOnDemand.setPreName(Doctor obj, int index) {
        java.lang.String preName = "preName_" + index;
        if (preName.length() > 40) {
            preName = preName.substring(0, 40);
        }
        obj.setPreName(preName);
    }
    
    private void DoctorDataOnDemand.setEmail(Doctor obj, int index) {
        java.lang.String email = "email_" + index;
        if (email.length() > 40) {
            email = email.substring(0, 40);
        }
        obj.setEmail(email);
    }
    
    private void DoctorDataOnDemand.setTelephone(Doctor obj, int index) {
        java.lang.String telephone = "telephone_" + index;
        if (telephone.length() > 30) {
            telephone = telephone.substring(0, 30);
        }
        obj.setTelephone(telephone);
    }
    
    private void DoctorDataOnDemand.setClinic(Doctor obj, int index) {
        ch.unibas.medizin.osce.domain.Clinic clinic = clinicDataOnDemand.getRandomClinic();
        obj.setClinic(clinic);
    }
    
    private void DoctorDataOnDemand.setOffice(Doctor obj, int index) {
        ch.unibas.medizin.osce.domain.Office office = officeDataOnDemand.getSpecificOffice(index);
        obj.setOffice(office);
    }
    
    private void DoctorDataOnDemand.setIsActive(Doctor obj, int index) {
        java.lang.Boolean isActive = Boolean.TRUE;
        obj.setIsActive(isActive);
    }
    
    private void DoctorDataOnDemand.setSpecialisation(Doctor obj, int index) {
        ch.unibas.medizin.osce.domain.Specialisation specialisation = specialisationDataOnDemand.getRandomSpecialisation();
        obj.setSpecialisation(specialisation);
    }
    
    public Doctor DoctorDataOnDemand.getSpecificDoctor(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Doctor obj = data.get(index);
        return Doctor.findDoctor(obj.getId());
    }
    
    public Doctor DoctorDataOnDemand.getRandomDoctor() {
        init();
        Doctor obj = data.get(rnd.nextInt(data.size()));
        return Doctor.findDoctor(obj.getId());
    }
    
    public boolean DoctorDataOnDemand.modifyDoctor(Doctor obj) {
        return false;
    }
    
    public void DoctorDataOnDemand.init() {
        data = ch.unibas.medizin.osce.domain.Doctor.findDoctorEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Doctor' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<ch.unibas.medizin.osce.domain.Doctor>();
        for (int i = 0; i < 10; i++) {
            ch.unibas.medizin.osce.domain.Doctor obj = getNewTransientDoctor(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
