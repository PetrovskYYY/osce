// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ch.unibas.medizin.osce.client.managed.request;

import java.util.List;

import ch.unibas.medizin.osce.shared.Sorting;

import com.google.web.bindery.requestfactory.shared.InstanceRequest;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.web.bindery.requestfactory.shared.RequestContext;
import com.google.web.bindery.requestfactory.shared.ServiceName;

@ServiceName("ch.unibas.medizin.osce.domain.RoleTopic")
public interface RoleTopicRequest extends RequestContext {

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.RoleTopicProxy, java.lang.Void> persist();

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.RoleTopicProxy, java.lang.Void> remove();

    abstract Request<java.lang.Long> countRoleTopics();

    abstract Request<ch.unibas.medizin.osce.client.managed.request.RoleTopicProxy> findRoleTopic(Long id);

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.RoleTopicProxy>> findAllRoleTopics();

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.RoleTopicProxy>> findRoleTopicEntries(int firstResult, int maxResults);

    abstract Request<Long> countRoleTopicBySpecialisationId(String searchValue,Long specialisationId);
    abstract Request<List<RoleTopicProxy>> findRoleTopicBySpecialisationId(String sortname,Sorting sortorder,String srarchValue,Long specialisationId, int firstResult, int maxResults);
    abstract Request<List<SpecialisationProxy>> findAllSpecialisation();
    //abstract Request<List<RoleParticipantProxy>> findAllAuther();
    abstract Request<List<DoctorProxy>> findAllAutherName();
    abstract Request<List<DoctorProxy>> findAllReviewerName();
    //abstract Request<List<List<RoleParticipantProxy>>> findAllReviewer();
    //abstract Request<List<SpecialisationProxy>> findAllSpecialisation();
    //spec start
    abstract Request<List<RoleTopicProxy>> findAllRoleTopic(int id);
    abstract Request<List<RoleTopicProxy>> findRoleTopicsByAdvancedSearchAndSort(
    		String sortColumn,
    		Sorting order,
    		String searchWord, 
    		List<String> searchThrough,
    		List<AdvancedSearchCriteriaProxy> searchCriteria,
    		Integer firstResult, 
    		Integer maxResults
    );
    abstract Request<List<RoleTopicProxy>> advanceSearch(
    		String sortColumn,
    		Sorting order,
    		String searchWord, 
    		List<String> searchThrough,
    		List<String> tableFilters,
    		List<String> whereFilters,
    		Integer firstResult, 
    		Integer maxResults
    );


    abstract Request<Long> advanceSearchCount(
    		String sortColumn,
    		Sorting order,
    		String searchWord, 
    		List<String> searchThrough,
    		List<String> tableFilters,
    		List<String> whereFilters
    		
    );
    //abstract Request<List<RoleTopicProxy>> findRoleTopicBySpecialisation(Long specialisationId);
    abstract Request<List<RoleTopicProxy>> findRoleTopicBySpecialisation(Long specialisationId, OscePostBlueprintProxy proxy);

}
