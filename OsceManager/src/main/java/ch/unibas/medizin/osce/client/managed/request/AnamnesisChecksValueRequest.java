// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ch.unibas.medizin.osce.client.managed.request;

import java.util.List;

import ch.unibas.medizin.osce.client.a_nonroo.client.AnamnesisCheckTitleToAnamnesisCheckValueProxy;

import com.google.web.bindery.requestfactory.shared.InstanceRequest;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.web.bindery.requestfactory.shared.RequestContext;
import com.google.web.bindery.requestfactory.shared.ServiceName;

@ServiceName("ch.unibas.medizin.osce.domain.AnamnesisChecksValue")
public interface AnamnesisChecksValueRequest extends RequestContext {

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.AnamnesisChecksValueProxy, java.lang.Void> persist();

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.AnamnesisChecksValueProxy, java.lang.Void> remove();

    abstract Request<java.lang.Long> countAnamnesisChecksValues();

    abstract Request<ch.unibas.medizin.osce.client.managed.request.AnamnesisChecksValueProxy> findAnamnesisChecksValue(Long id);

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.AnamnesisChecksValueProxy>> findAllAnamnesisChecksValues();

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.AnamnesisChecksValueProxy>> findAnamnesisChecksValueEntries(int firstResult, int maxResults);

    abstract InstanceRequest<AnamnesisChecksValueProxy, Void> persistNonRoo();
	
	abstract Request<Void> fillAnamnesisChecksValues(Long anamnesisFormId);
	
	abstract Request<Long> countAllAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle);
	abstract Request<Long> countAnsweredAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle);
	abstract Request<Long> countUnansweredAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle);
	
    abstract Request<List<AnamnesisChecksValueProxy>> findAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle, int firstResult, int maxResults);
    abstract Request<List<AnamnesisChecksValueProxy>> findAnsweredAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle, int firstResult, int maxResults);
    abstract Request<List<AnamnesisChecksValueProxy>> findUnansweredAnamnesisChecksValuesByAnamnesisFormAndTitle(Long anamnesisFormId, Long anamnesisTitleId, String needle, int firstResult, int maxResults);
    
    abstract Request<List<AnamnesisChecksValueProxy>> findAnamnesisChecksValuesByAnamnesisFormAndCheckTitle(Long anamnesisFormId,Long anamnesisChecktitleId);
  
    //Added code for OMS-151.
	abstract Request<List<AnamnesisChecksValueProxy>> findAnamnesisChecksValuesByAnamnesisFormAndTitleForAllTabs(Long id, String query, int firstResult, int maxResult);
	abstract Request<List<AnamnesisChecksValueProxy>> findAnsweredAnamnesisChecksValuesByAnamnesisFormAndTitleForAllTabs(Long id, String query, int firstResult, int maxResult);
	abstract Request<List<AnamnesisChecksValueProxy>> findUnansweredAnamnesisChecksValuesByAnamnesisFormAndTitleForAllTabs(Long id, String query, int firstResult, int maxResult);

}
