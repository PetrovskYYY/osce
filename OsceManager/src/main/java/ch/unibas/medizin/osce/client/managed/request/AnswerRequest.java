// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ch.unibas.medizin.osce.client.managed.request;

import java.util.List;
import java.util.Set;

import ch.unibas.medizin.osce.client.a_nonroo.client.MapEnvelopProxy;

import com.google.web.bindery.requestfactory.shared.InstanceRequest;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.web.bindery.requestfactory.shared.RequestContext;
import com.google.web.bindery.requestfactory.shared.ServiceName;

@ServiceName("ch.unibas.medizin.osce.domain.Answer")
public interface AnswerRequest extends RequestContext {

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.AnswerProxy, java.lang.Void> persist();

    abstract InstanceRequest<ch.unibas.medizin.osce.client.managed.request.AnswerProxy, java.lang.Void> remove();

    abstract Request<java.lang.Long> countAnswers();

    abstract Request<ch.unibas.medizin.osce.client.managed.request.AnswerProxy> findAnswer(Long studentId, Long questionId, Long osceDayId);

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.AnswerProxy>> findAllAnswers();

    abstract Request<java.util.List<ch.unibas.medizin.osce.client.managed.request.AnswerProxy>> findAnswerEntries(int firstResult, int maxResults);

    abstract Request< List<AnswerProxy>>  retrieveStudent(Long osceDayId,Long courseId);
	
   	// public abstract Request< List<ChecklistQuestionProxy>>  retrieveDistinctQuestion(Long postId);
   	 
   	 abstract Request<List<ChecklistItemProxy>> retrieveDistinctQuestionItem(Long postId);
   	 
   	 //public abstract Request< List<DoctorProxy>>  retrieveDistinctExaminer(Long postId);
   	 
   	 abstract Request< List<DoctorProxy>>  retrieveDistinctExaminerByItem(Long postId);
   	 
   	 abstract Request<List<MapEnvelopProxy>> calculate(Long osceId,int analyticType,Set<Long> itemId,List<String> examinerId,List<Integer> addPoints, List<String> postId, List<Long> queId);
   	 
   	 abstract Request< List<ChecklistQuestionProxy>>  retrieveDistinctItems(Long osceId);
   	 
   	 abstract Request<List<MapEnvelopProxy>> retrieveCalulatedData(Long osceId,int analyticType);
   	 
   	 abstract Request<String> createGraph(Long oscePostId);
}
