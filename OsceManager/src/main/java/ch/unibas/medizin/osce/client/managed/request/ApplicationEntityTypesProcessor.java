// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ch.unibas.medizin.osce.client.managed.request;

import com.google.gwt.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.gwt.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(TaskProxy.class);
        rtn.add(StudentProxy.class);
        rtn.add(StandardizedRoleProxy.class);
        rtn.add(StandardizedPatientProxy.class);
        rtn.add(SpokenLanguageProxy.class);
        rtn.add(SemesterProxy.class);
        rtn.add(ScarProxy.class);
        rtn.add(RoomProxy.class);
        rtn.add(RoleTopicProxy.class);
        rtn.add(ProfessionProxy.class);
        rtn.add(PatientInSemesterProxy.class);
        rtn.add(PatientInRoleProxy.class);
        rtn.add(OsceProxy.class);
        rtn.add(OscePostRoomProxy.class);
        rtn.add(OscePostProxy.class);
        rtn.add(OsceDayProxy.class);
        rtn.add(OfficeProxy.class);
        rtn.add(NationalityProxy.class);
        rtn.add(LangSkillProxy.class);
        rtn.add(EliminationCriterionProxy.class);
        rtn.add(DoctorProxy.class);
        rtn.add(DescriptionProxy.class);
        rtn.add(CourseProxy.class);
        rtn.add(ClinicProxy.class);
        rtn.add(BankaccountProxy.class);
        rtn.add(AssignmentProxy.class);
        rtn.add(AnamnesisFormProxy.class);
        rtn.add(AnamnesisChecksValueProxy.class);
        rtn.add(AnamnesisCheckProxy.class);
        rtn.add(AdvancedSearchCriteriaProxy.class);
        rtn.add(AdministratorProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(ch.unibas.medizin.osce.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (TaskProxy.class.equals(clazz)) {
            processor.handleTask((TaskProxy) null);
            return;
        }
        if (StudentProxy.class.equals(clazz)) {
            processor.handleStudent((StudentProxy) null);
            return;
        }
        if (StandardizedRoleProxy.class.equals(clazz)) {
            processor.handleStandardizedRole((StandardizedRoleProxy) null);
            return;
        }
        if (StandardizedPatientProxy.class.equals(clazz)) {
            processor.handleStandardizedPatient((StandardizedPatientProxy) null);
            return;
        }
        if (SpokenLanguageProxy.class.equals(clazz)) {
            processor.handleSpokenLanguage((SpokenLanguageProxy) null);
            return;
        }
        if (SemesterProxy.class.equals(clazz)) {
            processor.handleSemester((SemesterProxy) null);
            return;
        }
        if (ScarProxy.class.equals(clazz)) {
            processor.handleScar((ScarProxy) null);
            return;
        }
        if (RoomProxy.class.equals(clazz)) {
            processor.handleRoom((RoomProxy) null);
            return;
        }
        if (RoleTopicProxy.class.equals(clazz)) {
            processor.handleRoleTopic((RoleTopicProxy) null);
            return;
        }
        if (ProfessionProxy.class.equals(clazz)) {
            processor.handleProfession((ProfessionProxy) null);
            return;
        }
        if (PatientInSemesterProxy.class.equals(clazz)) {
            processor.handlePatientInSemester((PatientInSemesterProxy) null);
            return;
        }
        if (PatientInRoleProxy.class.equals(clazz)) {
            processor.handlePatientInRole((PatientInRoleProxy) null);
            return;
        }
        if (OsceProxy.class.equals(clazz)) {
            processor.handleOsce((OsceProxy) null);
            return;
        }
        if (OscePostRoomProxy.class.equals(clazz)) {
            processor.handleOscePostRoom((OscePostRoomProxy) null);
            return;
        }
        if (OscePostProxy.class.equals(clazz)) {
            processor.handleOscePost((OscePostProxy) null);
            return;
        }
        if (OsceDayProxy.class.equals(clazz)) {
            processor.handleOsceDay((OsceDayProxy) null);
            return;
        }
        if (OfficeProxy.class.equals(clazz)) {
            processor.handleOffice((OfficeProxy) null);
            return;
        }
        if (NationalityProxy.class.equals(clazz)) {
            processor.handleNationality((NationalityProxy) null);
            return;
        }
        if (LangSkillProxy.class.equals(clazz)) {
            processor.handleLangSkill((LangSkillProxy) null);
            return;
        }
        if (EliminationCriterionProxy.class.equals(clazz)) {
            processor.handleEliminationCriterion((EliminationCriterionProxy) null);
            return;
        }
        if (DoctorProxy.class.equals(clazz)) {
            processor.handleDoctor((DoctorProxy) null);
            return;
        }
        if (DescriptionProxy.class.equals(clazz)) {
            processor.handleDescription((DescriptionProxy) null);
            return;
        }
        if (CourseProxy.class.equals(clazz)) {
            processor.handleCourse((CourseProxy) null);
            return;
        }
        if (ClinicProxy.class.equals(clazz)) {
            processor.handleClinic((ClinicProxy) null);
            return;
        }
        if (BankaccountProxy.class.equals(clazz)) {
            processor.handleBankaccount((BankaccountProxy) null);
            return;
        }
        if (AssignmentProxy.class.equals(clazz)) {
            processor.handleAssignment((AssignmentProxy) null);
            return;
        }
        if (AnamnesisFormProxy.class.equals(clazz)) {
            processor.handleAnamnesisForm((AnamnesisFormProxy) null);
            return;
        }
        if (AnamnesisChecksValueProxy.class.equals(clazz)) {
            processor.handleAnamnesisChecksValue((AnamnesisChecksValueProxy) null);
            return;
        }
        if (AnamnesisCheckProxy.class.equals(clazz)) {
            processor.handleAnamnesisCheck((AnamnesisCheckProxy) null);
            return;
        }
        if (AdvancedSearchCriteriaProxy.class.equals(clazz)) {
            processor.handleAdvancedSearchCriteria((AdvancedSearchCriteriaProxy) null);
            return;
        }
        if (AdministratorProxy.class.equals(clazz)) {
            processor.handleAdministrator((AdministratorProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(ch.unibas.medizin.osce.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof TaskProxy) {
            processor.handleTask((TaskProxy) proxy);
            return;
        }
        if (proxy instanceof StudentProxy) {
            processor.handleStudent((StudentProxy) proxy);
            return;
        }
        if (proxy instanceof StandardizedRoleProxy) {
            processor.handleStandardizedRole((StandardizedRoleProxy) proxy);
            return;
        }
        if (proxy instanceof StandardizedPatientProxy) {
            processor.handleStandardizedPatient((StandardizedPatientProxy) proxy);
            return;
        }
        if (proxy instanceof SpokenLanguageProxy) {
            processor.handleSpokenLanguage((SpokenLanguageProxy) proxy);
            return;
        }
        if (proxy instanceof SemesterProxy) {
            processor.handleSemester((SemesterProxy) proxy);
            return;
        }
        if (proxy instanceof ScarProxy) {
            processor.handleScar((ScarProxy) proxy);
            return;
        }
        if (proxy instanceof RoomProxy) {
            processor.handleRoom((RoomProxy) proxy);
            return;
        }
        if (proxy instanceof RoleTopicProxy) {
            processor.handleRoleTopic((RoleTopicProxy) proxy);
            return;
        }
        if (proxy instanceof ProfessionProxy) {
            processor.handleProfession((ProfessionProxy) proxy);
            return;
        }
        if (proxy instanceof PatientInSemesterProxy) {
            processor.handlePatientInSemester((PatientInSemesterProxy) proxy);
            return;
        }
        if (proxy instanceof PatientInRoleProxy) {
            processor.handlePatientInRole((PatientInRoleProxy) proxy);
            return;
        }
        if (proxy instanceof OsceProxy) {
            processor.handleOsce((OsceProxy) proxy);
            return;
        }
        if (proxy instanceof OscePostRoomProxy) {
            processor.handleOscePostRoom((OscePostRoomProxy) proxy);
            return;
        }
        if (proxy instanceof OscePostProxy) {
            processor.handleOscePost((OscePostProxy) proxy);
            return;
        }
        if (proxy instanceof OsceDayProxy) {
            processor.handleOsceDay((OsceDayProxy) proxy);
            return;
        }
        if (proxy instanceof OfficeProxy) {
            processor.handleOffice((OfficeProxy) proxy);
            return;
        }
        if (proxy instanceof NationalityProxy) {
            processor.handleNationality((NationalityProxy) proxy);
            return;
        }
        if (proxy instanceof LangSkillProxy) {
            processor.handleLangSkill((LangSkillProxy) proxy);
            return;
        }
        if (proxy instanceof EliminationCriterionProxy) {
            processor.handleEliminationCriterion((EliminationCriterionProxy) proxy);
            return;
        }
        if (proxy instanceof DoctorProxy) {
            processor.handleDoctor((DoctorProxy) proxy);
            return;
        }
        if (proxy instanceof DescriptionProxy) {
            processor.handleDescription((DescriptionProxy) proxy);
            return;
        }
        if (proxy instanceof CourseProxy) {
            processor.handleCourse((CourseProxy) proxy);
            return;
        }
        if (proxy instanceof ClinicProxy) {
            processor.handleClinic((ClinicProxy) proxy);
            return;
        }
        if (proxy instanceof BankaccountProxy) {
            processor.handleBankaccount((BankaccountProxy) proxy);
            return;
        }
        if (proxy instanceof AssignmentProxy) {
            processor.handleAssignment((AssignmentProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisFormProxy) {
            processor.handleAnamnesisForm((AnamnesisFormProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisChecksValueProxy) {
            processor.handleAnamnesisChecksValue((AnamnesisChecksValueProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisCheckProxy) {
            processor.handleAnamnesisCheck((AnamnesisCheckProxy) proxy);
            return;
        }
        if (proxy instanceof AdvancedSearchCriteriaProxy) {
            processor.handleAdvancedSearchCriteria((AdvancedSearchCriteriaProxy) proxy);
            return;
        }
        if (proxy instanceof AdministratorProxy) {
            processor.handleAdministrator((AdministratorProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleTask(TaskProxy proxy);

    public abstract void handleStudent(StudentProxy proxy);

    public abstract void handleStandardizedRole(StandardizedRoleProxy proxy);

    public abstract void handleStandardizedPatient(StandardizedPatientProxy proxy);

    public abstract void handleSpokenLanguage(SpokenLanguageProxy proxy);

    public abstract void handleSemester(SemesterProxy proxy);

    public abstract void handleScar(ScarProxy proxy);

    public abstract void handleRoom(RoomProxy proxy);

    public abstract void handleRoleTopic(RoleTopicProxy proxy);

    public abstract void handleProfession(ProfessionProxy proxy);

    public abstract void handlePatientInSemester(PatientInSemesterProxy proxy);

    public abstract void handlePatientInRole(PatientInRoleProxy proxy);

    public abstract void handleOsce(OsceProxy proxy);

    public abstract void handleOscePostRoom(OscePostRoomProxy proxy);

    public abstract void handleOscePost(OscePostProxy proxy);

    public abstract void handleOsceDay(OsceDayProxy proxy);

    public abstract void handleOffice(OfficeProxy proxy);

    public abstract void handleNationality(NationalityProxy proxy);

    public abstract void handleLangSkill(LangSkillProxy proxy);

    public abstract void handleEliminationCriterion(EliminationCriterionProxy proxy);

    public abstract void handleDoctor(DoctorProxy proxy);

    public abstract void handleDescription(DescriptionProxy proxy);

    public abstract void handleCourse(CourseProxy proxy);

    public abstract void handleClinic(ClinicProxy proxy);

    public abstract void handleBankaccount(BankaccountProxy proxy);

    public abstract void handleAssignment(AssignmentProxy proxy);

    public abstract void handleAnamnesisForm(AnamnesisFormProxy proxy);

    public abstract void handleAnamnesisChecksValue(AnamnesisChecksValueProxy proxy);

    public abstract void handleAnamnesisCheck(AnamnesisCheckProxy proxy);

    public abstract void handleAdvancedSearchCriteria(AdvancedSearchCriteriaProxy proxy);

    public abstract void handleAdministrator(AdministratorProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
