// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ch.unibas.medizin.osce.client.managed.request;

import com.google.web.bindery.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(UsedMaterialProxy.class);
        rtn.add(TrainingSuggestionProxy.class);
        rtn.add(TrainingProxy.class);
        rtn.add(TrainingDateProxy.class);
        rtn.add(TrainingBlockProxy.class);
        rtn.add(TopicProxy.class);
        rtn.add(TaskProxy.class);
        rtn.add(StudentProxy.class);
        rtn.add(StudentOscesProxy.class);
        rtn.add(StandardizedRoleProxy.class);
        rtn.add(StandardizedPatientProxy.class);
        rtn.add(SpTrainingDateProxy.class);
        rtn.add(SpTrainingBlockProxy.class);
        rtn.add(SpStandardizedPatientProxy.class);
        rtn.add(SpSemesterProxy.class);
        rtn.add(SpScarProxy.class);
        rtn.add(SpProfessionProxy.class);
        rtn.add(SPPortalPersonProxy.class);
        rtn.add(SpPatientInSemesterProxy.class);
        rtn.add(SpOsceDateProxy.class);
        rtn.add(SpokenLanguageProxy.class);
        rtn.add(SpNationalityProxy.class);
        rtn.add(SpEliminationCriterionProxy.class);
        rtn.add(SpecialisationProxy.class);
        rtn.add(SpBankaccountProxy.class);
        rtn.add(SpAnamnesisFormProxy.class);
        rtn.add(SpAnamnesisCheckTitleProxy.class);
        rtn.add(SpAnamnesisChecksValueProxy.class);
        rtn.add(SpAnamnesisCheckProxy.class);
        rtn.add(SkillProxy.class);
        rtn.add(SkillLevelProxy.class);
        rtn.add(SkillHasApplianceProxy.class);
        rtn.add(SimpleSearchCriteriaProxy.class);
        rtn.add(SignatureProxy.class);
        rtn.add(SemesterProxy.class);
        rtn.add(ScarProxy.class);
        rtn.add(RoomProxy.class);
        rtn.add(RoleTopicProxy.class);
        rtn.add(RoleTemplateProxy.class);
        rtn.add(RoleTableItemValueProxy.class);
        rtn.add(RoleTableItemProxy.class);
        rtn.add(RoleSubItemValueProxy.class);
        rtn.add(RoleParticipantProxy.class);
        rtn.add(RoleItemAccessProxy.class);
        rtn.add(RoleBaseItemProxy.class);
        rtn.add(ProfessionProxy.class);
        rtn.add(PostAnalysisProxy.class);
        rtn.add(PersonProxy.class);
        rtn.add(PatientInSemesterProxy.class);
        rtn.add(PatientInRoleProxy.class);
        rtn.add(OsceSettingsProxy.class);
        rtn.add(OsceSequenceProxy.class);
        rtn.add(OsceProxy.class);
        rtn.add(OscePostRoomProxy.class);
        rtn.add(OscePostProxy.class);
        rtn.add(OscePostBlueprintProxy.class);
        rtn.add(OsceDayRotationProxy.class);
        rtn.add(OsceDayProxy.class);
        rtn.add(OsceDateProxy.class);
        rtn.add(OfficeProxy.class);
        rtn.add(NotesProxy.class);
        rtn.add(NationalityProxy.class);
        rtn.add(MinorSkillProxy.class);
        rtn.add(MediaContentTypeProxy.class);
        rtn.add(MediaContentProxy.class);
        rtn.add(MaterialListProxy.class);
        rtn.add(MainSkillProxy.class);
        rtn.add(MainClassificationProxy.class);
        rtn.add(LogEntryProxy.class);
        rtn.add(LangSkillProxy.class);
        rtn.add(KeywordProxy.class);
        rtn.add(KeyPairProxy.class);
        rtn.add(ItemAnalysisProxy.class);
        rtn.add(FileProxy.class);
        rtn.add(EliminationCriterionProxy.class);
        rtn.add(DoctorProxy.class);
        rtn.add(DescriptionProxy.class);
        rtn.add(CourseProxy.class);
        rtn.add(ClinicProxy.class);
        rtn.add(ClassificationTopicProxy.class);
        rtn.add(ChecklistTopicProxy.class);
        rtn.add(ChecklistQuestionProxy.class);
        rtn.add(CheckListProxy.class);
        rtn.add(ChecklistOptionProxy.class);
        rtn.add(ChecklistItemProxy.class);
        rtn.add(ChecklistCriteriaProxy.class);
        rtn.add(BucketInformationProxy.class);
        rtn.add(BankaccountProxy.class);
        rtn.add(AssignmentProxy.class);
        rtn.add(ApplianceProxy.class);
        rtn.add(AnswerProxy.class);
        rtn.add(AnswerCheckListCriteriaProxy.class);
        rtn.add(AnamnesisFormProxy.class);
        rtn.add(AnamnesisCheckTitleProxy.class);
        rtn.add(AnamnesisChecksValueProxy.class);
        rtn.add(AnamnesisCheckProxy.class);
        rtn.add(AdvancedSearchCriteriaProxy.class);
        rtn.add(AdministratorProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(ch.unibas.medizin.osce.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (UsedMaterialProxy.class.equals(clazz)) {
            processor.handleUsedMaterial((UsedMaterialProxy) null);
            return;
        }
        if (TrainingSuggestionProxy.class.equals(clazz)) {
            processor.handleTrainingSuggestion((TrainingSuggestionProxy) null);
            return;
        }
        if (TrainingProxy.class.equals(clazz)) {
            processor.handleTraining((TrainingProxy) null);
            return;
        }
        if (TrainingDateProxy.class.equals(clazz)) {
            processor.handleTrainingDate((TrainingDateProxy) null);
            return;
        }
        if (TrainingBlockProxy.class.equals(clazz)) {
            processor.handleTrainingBlock((TrainingBlockProxy) null);
            return;
        }
        if (TopicProxy.class.equals(clazz)) {
            processor.handleTopic((TopicProxy) null);
            return;
        }
        if (TaskProxy.class.equals(clazz)) {
            processor.handleTask((TaskProxy) null);
            return;
        }
        if (StudentProxy.class.equals(clazz)) {
            processor.handleStudent((StudentProxy) null);
            return;
        }
        if (StudentOscesProxy.class.equals(clazz)) {
            processor.handleStudentOsces((StudentOscesProxy) null);
            return;
        }
        if (StandardizedRoleProxy.class.equals(clazz)) {
            processor.handleStandardizedRole((StandardizedRoleProxy) null);
            return;
        }
        if (StandardizedPatientProxy.class.equals(clazz)) {
            processor.handleStandardizedPatient((StandardizedPatientProxy) null);
            return;
        }
        if (SpTrainingDateProxy.class.equals(clazz)) {
            processor.handleSpTrainingDate((SpTrainingDateProxy) null);
            return;
        }
        if (SpTrainingBlockProxy.class.equals(clazz)) {
            processor.handleSpTrainingBlock((SpTrainingBlockProxy) null);
            return;
        }
        if (SpStandardizedPatientProxy.class.equals(clazz)) {
            processor.handleSpStandardizedPatient((SpStandardizedPatientProxy) null);
            return;
        }
        if (SpSemesterProxy.class.equals(clazz)) {
            processor.handleSpSemester((SpSemesterProxy) null);
            return;
        }
        if (SpScarProxy.class.equals(clazz)) {
            processor.handleSpScar((SpScarProxy) null);
            return;
        }
        if (SpProfessionProxy.class.equals(clazz)) {
            processor.handleSpProfession((SpProfessionProxy) null);
            return;
        }
        if (SPPortalPersonProxy.class.equals(clazz)) {
            processor.handleSPPortalPerson((SPPortalPersonProxy) null);
            return;
        }
        if (SpPatientInSemesterProxy.class.equals(clazz)) {
            processor.handleSpPatientInSemester((SpPatientInSemesterProxy) null);
            return;
        }
        if (SpOsceDateProxy.class.equals(clazz)) {
            processor.handleSpOsceDate((SpOsceDateProxy) null);
            return;
        }
        if (SpokenLanguageProxy.class.equals(clazz)) {
            processor.handleSpokenLanguage((SpokenLanguageProxy) null);
            return;
        }
        if (SpNationalityProxy.class.equals(clazz)) {
            processor.handleSpNationality((SpNationalityProxy) null);
            return;
        }
        if (SpEliminationCriterionProxy.class.equals(clazz)) {
            processor.handleSpEliminationCriterion((SpEliminationCriterionProxy) null);
            return;
        }
        if (SpecialisationProxy.class.equals(clazz)) {
            processor.handleSpecialisation((SpecialisationProxy) null);
            return;
        }
        if (SpBankaccountProxy.class.equals(clazz)) {
            processor.handleSpBankaccount((SpBankaccountProxy) null);
            return;
        }
        if (SpAnamnesisFormProxy.class.equals(clazz)) {
            processor.handleSpAnamnesisForm((SpAnamnesisFormProxy) null);
            return;
        }
        if (SpAnamnesisCheckTitleProxy.class.equals(clazz)) {
            processor.handleSpAnamnesisCheckTitle((SpAnamnesisCheckTitleProxy) null);
            return;
        }
        if (SpAnamnesisChecksValueProxy.class.equals(clazz)) {
            processor.handleSpAnamnesisChecksValue((SpAnamnesisChecksValueProxy) null);
            return;
        }
        if (SpAnamnesisCheckProxy.class.equals(clazz)) {
            processor.handleSpAnamnesisCheck((SpAnamnesisCheckProxy) null);
            return;
        }
        if (SkillProxy.class.equals(clazz)) {
            processor.handleSkill((SkillProxy) null);
            return;
        }
        if (SkillLevelProxy.class.equals(clazz)) {
            processor.handleSkillLevel((SkillLevelProxy) null);
            return;
        }
        if (SkillHasApplianceProxy.class.equals(clazz)) {
            processor.handleSkillHasAppliance((SkillHasApplianceProxy) null);
            return;
        }
        if (SimpleSearchCriteriaProxy.class.equals(clazz)) {
            processor.handleSimpleSearchCriteria((SimpleSearchCriteriaProxy) null);
            return;
        }
        if (SignatureProxy.class.equals(clazz)) {
            processor.handleSignature((SignatureProxy) null);
            return;
        }
        if (SemesterProxy.class.equals(clazz)) {
            processor.handleSemester((SemesterProxy) null);
            return;
        }
        if (ScarProxy.class.equals(clazz)) {
            processor.handleScar((ScarProxy) null);
            return;
        }
        if (RoomProxy.class.equals(clazz)) {
            processor.handleRoom((RoomProxy) null);
            return;
        }
        if (RoleTopicProxy.class.equals(clazz)) {
            processor.handleRoleTopic((RoleTopicProxy) null);
            return;
        }
        if (RoleTemplateProxy.class.equals(clazz)) {
            processor.handleRoleTemplate((RoleTemplateProxy) null);
            return;
        }
        if (RoleTableItemValueProxy.class.equals(clazz)) {
            processor.handleRoleTableItemValue((RoleTableItemValueProxy) null);
            return;
        }
        if (RoleTableItemProxy.class.equals(clazz)) {
            processor.handleRoleTableItem((RoleTableItemProxy) null);
            return;
        }
        if (RoleSubItemValueProxy.class.equals(clazz)) {
            processor.handleRoleSubItemValue((RoleSubItemValueProxy) null);
            return;
        }
        if (RoleParticipantProxy.class.equals(clazz)) {
            processor.handleRoleParticipant((RoleParticipantProxy) null);
            return;
        }
        if (RoleItemAccessProxy.class.equals(clazz)) {
            processor.handleRoleItemAccess((RoleItemAccessProxy) null);
            return;
        }
        if (RoleBaseItemProxy.class.equals(clazz)) {
            processor.handleRoleBaseItem((RoleBaseItemProxy) null);
            return;
        }
        if (ProfessionProxy.class.equals(clazz)) {
            processor.handleProfession((ProfessionProxy) null);
            return;
        }
        if (PostAnalysisProxy.class.equals(clazz)) {
            processor.handlePostAnalysis((PostAnalysisProxy) null);
            return;
        }
        if (PersonProxy.class.equals(clazz)) {
            processor.handlePerson((PersonProxy) null);
            return;
        }
        if (PatientInSemesterProxy.class.equals(clazz)) {
            processor.handlePatientInSemester((PatientInSemesterProxy) null);
            return;
        }
        if (PatientInRoleProxy.class.equals(clazz)) {
            processor.handlePatientInRole((PatientInRoleProxy) null);
            return;
        }
        if (OsceSettingsProxy.class.equals(clazz)) {
            processor.handleOsceSettings((OsceSettingsProxy) null);
            return;
        }
        if (OsceSequenceProxy.class.equals(clazz)) {
            processor.handleOsceSequence((OsceSequenceProxy) null);
            return;
        }
        if (OsceProxy.class.equals(clazz)) {
            processor.handleOsce((OsceProxy) null);
            return;
        }
        if (OscePostRoomProxy.class.equals(clazz)) {
            processor.handleOscePostRoom((OscePostRoomProxy) null);
            return;
        }
        if (OscePostProxy.class.equals(clazz)) {
            processor.handleOscePost((OscePostProxy) null);
            return;
        }
        if (OscePostBlueprintProxy.class.equals(clazz)) {
            processor.handleOscePostBlueprint((OscePostBlueprintProxy) null);
            return;
        }
        if (OsceDayRotationProxy.class.equals(clazz)) {
            processor.handleOsceDayRotation((OsceDayRotationProxy) null);
            return;
        }
        if (OsceDayProxy.class.equals(clazz)) {
            processor.handleOsceDay((OsceDayProxy) null);
            return;
        }
        if (OsceDateProxy.class.equals(clazz)) {
            processor.handleOsceDate((OsceDateProxy) null);
            return;
        }
        if (OfficeProxy.class.equals(clazz)) {
            processor.handleOffice((OfficeProxy) null);
            return;
        }
        if (NotesProxy.class.equals(clazz)) {
            processor.handleNotes((NotesProxy) null);
            return;
        }
        if (NationalityProxy.class.equals(clazz)) {
            processor.handleNationality((NationalityProxy) null);
            return;
        }
        if (MinorSkillProxy.class.equals(clazz)) {
            processor.handleMinorSkill((MinorSkillProxy) null);
            return;
        }
        if (MediaContentTypeProxy.class.equals(clazz)) {
            processor.handleMediaContentType((MediaContentTypeProxy) null);
            return;
        }
        if (MediaContentProxy.class.equals(clazz)) {
            processor.handleMediaContent((MediaContentProxy) null);
            return;
        }
        if (MaterialListProxy.class.equals(clazz)) {
            processor.handleMaterialList((MaterialListProxy) null);
            return;
        }
        if (MainSkillProxy.class.equals(clazz)) {
            processor.handleMainSkill((MainSkillProxy) null);
            return;
        }
        if (MainClassificationProxy.class.equals(clazz)) {
            processor.handleMainClassification((MainClassificationProxy) null);
            return;
        }
        if (LogEntryProxy.class.equals(clazz)) {
            processor.handleLogEntry((LogEntryProxy) null);
            return;
        }
        if (LangSkillProxy.class.equals(clazz)) {
            processor.handleLangSkill((LangSkillProxy) null);
            return;
        }
        if (KeywordProxy.class.equals(clazz)) {
            processor.handleKeyword((KeywordProxy) null);
            return;
        }
        if (KeyPairProxy.class.equals(clazz)) {
            processor.handleKeyPair((KeyPairProxy) null);
            return;
        }
        if (ItemAnalysisProxy.class.equals(clazz)) {
            processor.handleItemAnalysis((ItemAnalysisProxy) null);
            return;
        }
        if (FileProxy.class.equals(clazz)) {
            processor.handleFile((FileProxy) null);
            return;
        }
        if (EliminationCriterionProxy.class.equals(clazz)) {
            processor.handleEliminationCriterion((EliminationCriterionProxy) null);
            return;
        }
        if (DoctorProxy.class.equals(clazz)) {
            processor.handleDoctor((DoctorProxy) null);
            return;
        }
        if (DescriptionProxy.class.equals(clazz)) {
            processor.handleDescription((DescriptionProxy) null);
            return;
        }
        if (CourseProxy.class.equals(clazz)) {
            processor.handleCourse((CourseProxy) null);
            return;
        }
        if (ClinicProxy.class.equals(clazz)) {
            processor.handleClinic((ClinicProxy) null);
            return;
        }
        if (ClassificationTopicProxy.class.equals(clazz)) {
            processor.handleClassificationTopic((ClassificationTopicProxy) null);
            return;
        }
        if (ChecklistTopicProxy.class.equals(clazz)) {
            processor.handleChecklistTopic((ChecklistTopicProxy) null);
            return;
        }
        if (ChecklistQuestionProxy.class.equals(clazz)) {
            processor.handleChecklistQuestion((ChecklistQuestionProxy) null);
            return;
        }
        if (CheckListProxy.class.equals(clazz)) {
            processor.handleCheckList((CheckListProxy) null);
            return;
        }
        if (ChecklistOptionProxy.class.equals(clazz)) {
            processor.handleChecklistOption((ChecklistOptionProxy) null);
            return;
        }
        if (ChecklistItemProxy.class.equals(clazz)) {
            processor.handleChecklistItem((ChecklistItemProxy) null);
            return;
        }
        if (ChecklistCriteriaProxy.class.equals(clazz)) {
            processor.handleChecklistCriteria((ChecklistCriteriaProxy) null);
            return;
        }
        if (BucketInformationProxy.class.equals(clazz)) {
            processor.handleBucketInformation((BucketInformationProxy) null);
            return;
        }
        if (BankaccountProxy.class.equals(clazz)) {
            processor.handleBankaccount((BankaccountProxy) null);
            return;
        }
        if (AssignmentProxy.class.equals(clazz)) {
            processor.handleAssignment((AssignmentProxy) null);
            return;
        }
        if (ApplianceProxy.class.equals(clazz)) {
            processor.handleAppliance((ApplianceProxy) null);
            return;
        }
        if (AnswerProxy.class.equals(clazz)) {
            processor.handleAnswer((AnswerProxy) null);
            return;
        }
        if (AnswerCheckListCriteriaProxy.class.equals(clazz)) {
            processor.handleAnswerCheckListCriteria((AnswerCheckListCriteriaProxy) null);
            return;
        }
        if (AnamnesisFormProxy.class.equals(clazz)) {
            processor.handleAnamnesisForm((AnamnesisFormProxy) null);
            return;
        }
        if (AnamnesisCheckTitleProxy.class.equals(clazz)) {
            processor.handleAnamnesisCheckTitle((AnamnesisCheckTitleProxy) null);
            return;
        }
        if (AnamnesisChecksValueProxy.class.equals(clazz)) {
            processor.handleAnamnesisChecksValue((AnamnesisChecksValueProxy) null);
            return;
        }
        if (AnamnesisCheckProxy.class.equals(clazz)) {
            processor.handleAnamnesisCheck((AnamnesisCheckProxy) null);
            return;
        }
        if (AdvancedSearchCriteriaProxy.class.equals(clazz)) {
            processor.handleAdvancedSearchCriteria((AdvancedSearchCriteriaProxy) null);
            return;
        }
        if (AdministratorProxy.class.equals(clazz)) {
            processor.handleAdministrator((AdministratorProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(ch.unibas.medizin.osce.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof UsedMaterialProxy) {
            processor.handleUsedMaterial((UsedMaterialProxy) proxy);
            return;
        }
        if (proxy instanceof TrainingSuggestionProxy) {
            processor.handleTrainingSuggestion((TrainingSuggestionProxy) proxy);
            return;
        }
        if (proxy instanceof TrainingProxy) {
            processor.handleTraining((TrainingProxy) proxy);
            return;
        }
        if (proxy instanceof TrainingDateProxy) {
            processor.handleTrainingDate((TrainingDateProxy) proxy);
            return;
        }
        if (proxy instanceof TrainingBlockProxy) {
            processor.handleTrainingBlock((TrainingBlockProxy) proxy);
            return;
        }
        if (proxy instanceof TopicProxy) {
            processor.handleTopic((TopicProxy) proxy);
            return;
        }
        if (proxy instanceof TaskProxy) {
            processor.handleTask((TaskProxy) proxy);
            return;
        }
        if (proxy instanceof StudentProxy) {
            processor.handleStudent((StudentProxy) proxy);
            return;
        }
        if (proxy instanceof StudentOscesProxy) {
            processor.handleStudentOsces((StudentOscesProxy) proxy);
            return;
        }
        if (proxy instanceof StandardizedRoleProxy) {
            processor.handleStandardizedRole((StandardizedRoleProxy) proxy);
            return;
        }
        if (proxy instanceof StandardizedPatientProxy) {
            processor.handleStandardizedPatient((StandardizedPatientProxy) proxy);
            return;
        }
        if (proxy instanceof SpTrainingDateProxy) {
            processor.handleSpTrainingDate((SpTrainingDateProxy) proxy);
            return;
        }
        if (proxy instanceof SpTrainingBlockProxy) {
            processor.handleSpTrainingBlock((SpTrainingBlockProxy) proxy);
            return;
        }
        if (proxy instanceof SpStandardizedPatientProxy) {
            processor.handleSpStandardizedPatient((SpStandardizedPatientProxy) proxy);
            return;
        }
        if (proxy instanceof SpSemesterProxy) {
            processor.handleSpSemester((SpSemesterProxy) proxy);
            return;
        }
        if (proxy instanceof SpScarProxy) {
            processor.handleSpScar((SpScarProxy) proxy);
            return;
        }
        if (proxy instanceof SpProfessionProxy) {
            processor.handleSpProfession((SpProfessionProxy) proxy);
            return;
        }
        if (proxy instanceof SPPortalPersonProxy) {
            processor.handleSPPortalPerson((SPPortalPersonProxy) proxy);
            return;
        }
        if (proxy instanceof SpPatientInSemesterProxy) {
            processor.handleSpPatientInSemester((SpPatientInSemesterProxy) proxy);
            return;
        }
        if (proxy instanceof SpOsceDateProxy) {
            processor.handleSpOsceDate((SpOsceDateProxy) proxy);
            return;
        }
        if (proxy instanceof SpokenLanguageProxy) {
            processor.handleSpokenLanguage((SpokenLanguageProxy) proxy);
            return;
        }
        if (proxy instanceof SpNationalityProxy) {
            processor.handleSpNationality((SpNationalityProxy) proxy);
            return;
        }
        if (proxy instanceof SpEliminationCriterionProxy) {
            processor.handleSpEliminationCriterion((SpEliminationCriterionProxy) proxy);
            return;
        }
        if (proxy instanceof SpecialisationProxy) {
            processor.handleSpecialisation((SpecialisationProxy) proxy);
            return;
        }
        if (proxy instanceof SpBankaccountProxy) {
            processor.handleSpBankaccount((SpBankaccountProxy) proxy);
            return;
        }
        if (proxy instanceof SpAnamnesisFormProxy) {
            processor.handleSpAnamnesisForm((SpAnamnesisFormProxy) proxy);
            return;
        }
        if (proxy instanceof SpAnamnesisCheckTitleProxy) {
            processor.handleSpAnamnesisCheckTitle((SpAnamnesisCheckTitleProxy) proxy);
            return;
        }
        if (proxy instanceof SpAnamnesisChecksValueProxy) {
            processor.handleSpAnamnesisChecksValue((SpAnamnesisChecksValueProxy) proxy);
            return;
        }
        if (proxy instanceof SpAnamnesisCheckProxy) {
            processor.handleSpAnamnesisCheck((SpAnamnesisCheckProxy) proxy);
            return;
        }
        if (proxy instanceof SkillProxy) {
            processor.handleSkill((SkillProxy) proxy);
            return;
        }
        if (proxy instanceof SkillLevelProxy) {
            processor.handleSkillLevel((SkillLevelProxy) proxy);
            return;
        }
        if (proxy instanceof SkillHasApplianceProxy) {
            processor.handleSkillHasAppliance((SkillHasApplianceProxy) proxy);
            return;
        }
        if (proxy instanceof SimpleSearchCriteriaProxy) {
            processor.handleSimpleSearchCriteria((SimpleSearchCriteriaProxy) proxy);
            return;
        }
        if (proxy instanceof SignatureProxy) {
            processor.handleSignature((SignatureProxy) proxy);
            return;
        }
        if (proxy instanceof SemesterProxy) {
            processor.handleSemester((SemesterProxy) proxy);
            return;
        }
        if (proxy instanceof ScarProxy) {
            processor.handleScar((ScarProxy) proxy);
            return;
        }
        if (proxy instanceof RoomProxy) {
            processor.handleRoom((RoomProxy) proxy);
            return;
        }
        if (proxy instanceof RoleTopicProxy) {
            processor.handleRoleTopic((RoleTopicProxy) proxy);
            return;
        }
        if (proxy instanceof RoleTemplateProxy) {
            processor.handleRoleTemplate((RoleTemplateProxy) proxy);
            return;
        }
        if (proxy instanceof RoleTableItemValueProxy) {
            processor.handleRoleTableItemValue((RoleTableItemValueProxy) proxy);
            return;
        }
        if (proxy instanceof RoleTableItemProxy) {
            processor.handleRoleTableItem((RoleTableItemProxy) proxy);
            return;
        }
        if (proxy instanceof RoleSubItemValueProxy) {
            processor.handleRoleSubItemValue((RoleSubItemValueProxy) proxy);
            return;
        }
        if (proxy instanceof RoleParticipantProxy) {
            processor.handleRoleParticipant((RoleParticipantProxy) proxy);
            return;
        }
        if (proxy instanceof RoleItemAccessProxy) {
            processor.handleRoleItemAccess((RoleItemAccessProxy) proxy);
            return;
        }
        if (proxy instanceof RoleBaseItemProxy) {
            processor.handleRoleBaseItem((RoleBaseItemProxy) proxy);
            return;
        }
        if (proxy instanceof ProfessionProxy) {
            processor.handleProfession((ProfessionProxy) proxy);
            return;
        }
        if (proxy instanceof PostAnalysisProxy) {
            processor.handlePostAnalysis((PostAnalysisProxy) proxy);
            return;
        }
        if (proxy instanceof PersonProxy) {
            processor.handlePerson((PersonProxy) proxy);
            return;
        }
        if (proxy instanceof PatientInSemesterProxy) {
            processor.handlePatientInSemester((PatientInSemesterProxy) proxy);
            return;
        }
        if (proxy instanceof PatientInRoleProxy) {
            processor.handlePatientInRole((PatientInRoleProxy) proxy);
            return;
        }
        if (proxy instanceof OsceSettingsProxy) {
            processor.handleOsceSettings((OsceSettingsProxy) proxy);
            return;
        }
        if (proxy instanceof OsceSequenceProxy) {
            processor.handleOsceSequence((OsceSequenceProxy) proxy);
            return;
        }
        if (proxy instanceof OsceProxy) {
            processor.handleOsce((OsceProxy) proxy);
            return;
        }
        if (proxy instanceof OscePostRoomProxy) {
            processor.handleOscePostRoom((OscePostRoomProxy) proxy);
            return;
        }
        if (proxy instanceof OscePostProxy) {
            processor.handleOscePost((OscePostProxy) proxy);
            return;
        }
        if (proxy instanceof OscePostBlueprintProxy) {
            processor.handleOscePostBlueprint((OscePostBlueprintProxy) proxy);
            return;
        }
        if (proxy instanceof OsceDayRotationProxy) {
            processor.handleOsceDayRotation((OsceDayRotationProxy) proxy);
            return;
        }
        if (proxy instanceof OsceDayProxy) {
            processor.handleOsceDay((OsceDayProxy) proxy);
            return;
        }
        if (proxy instanceof OsceDateProxy) {
            processor.handleOsceDate((OsceDateProxy) proxy);
            return;
        }
        if (proxy instanceof OfficeProxy) {
            processor.handleOffice((OfficeProxy) proxy);
            return;
        }
        if (proxy instanceof NotesProxy) {
            processor.handleNotes((NotesProxy) proxy);
            return;
        }
        if (proxy instanceof NationalityProxy) {
            processor.handleNationality((NationalityProxy) proxy);
            return;
        }
        if (proxy instanceof MinorSkillProxy) {
            processor.handleMinorSkill((MinorSkillProxy) proxy);
            return;
        }
        if (proxy instanceof MediaContentTypeProxy) {
            processor.handleMediaContentType((MediaContentTypeProxy) proxy);
            return;
        }
        if (proxy instanceof MediaContentProxy) {
            processor.handleMediaContent((MediaContentProxy) proxy);
            return;
        }
        if (proxy instanceof MaterialListProxy) {
            processor.handleMaterialList((MaterialListProxy) proxy);
            return;
        }
        if (proxy instanceof MainSkillProxy) {
            processor.handleMainSkill((MainSkillProxy) proxy);
            return;
        }
        if (proxy instanceof MainClassificationProxy) {
            processor.handleMainClassification((MainClassificationProxy) proxy);
            return;
        }
        if (proxy instanceof LogEntryProxy) {
            processor.handleLogEntry((LogEntryProxy) proxy);
            return;
        }
        if (proxy instanceof LangSkillProxy) {
            processor.handleLangSkill((LangSkillProxy) proxy);
            return;
        }
        if (proxy instanceof KeywordProxy) {
            processor.handleKeyword((KeywordProxy) proxy);
            return;
        }
        if (proxy instanceof KeyPairProxy) {
            processor.handleKeyPair((KeyPairProxy) proxy);
            return;
        }
        if (proxy instanceof ItemAnalysisProxy) {
            processor.handleItemAnalysis((ItemAnalysisProxy) proxy);
            return;
        }
        if (proxy instanceof FileProxy) {
            processor.handleFile((FileProxy) proxy);
            return;
        }
        if (proxy instanceof EliminationCriterionProxy) {
            processor.handleEliminationCriterion((EliminationCriterionProxy) proxy);
            return;
        }
        if (proxy instanceof DoctorProxy) {
            processor.handleDoctor((DoctorProxy) proxy);
            return;
        }
        if (proxy instanceof DescriptionProxy) {
            processor.handleDescription((DescriptionProxy) proxy);
            return;
        }
        if (proxy instanceof CourseProxy) {
            processor.handleCourse((CourseProxy) proxy);
            return;
        }
        if (proxy instanceof ClinicProxy) {
            processor.handleClinic((ClinicProxy) proxy);
            return;
        }
        if (proxy instanceof ClassificationTopicProxy) {
            processor.handleClassificationTopic((ClassificationTopicProxy) proxy);
            return;
        }
        if (proxy instanceof ChecklistTopicProxy) {
            processor.handleChecklistTopic((ChecklistTopicProxy) proxy);
            return;
        }
        if (proxy instanceof ChecklistQuestionProxy) {
            processor.handleChecklistQuestion((ChecklistQuestionProxy) proxy);
            return;
        }
        if (proxy instanceof CheckListProxy) {
            processor.handleCheckList((CheckListProxy) proxy);
            return;
        }
        if (proxy instanceof ChecklistOptionProxy) {
            processor.handleChecklistOption((ChecklistOptionProxy) proxy);
            return;
        }
        if (proxy instanceof ChecklistItemProxy) {
            processor.handleChecklistItem((ChecklistItemProxy) proxy);
            return;
        }
        if (proxy instanceof ChecklistCriteriaProxy) {
            processor.handleChecklistCriteria((ChecklistCriteriaProxy) proxy);
            return;
        }
        if (proxy instanceof BucketInformationProxy) {
            processor.handleBucketInformation((BucketInformationProxy) proxy);
            return;
        }
        if (proxy instanceof BankaccountProxy) {
            processor.handleBankaccount((BankaccountProxy) proxy);
            return;
        }
        if (proxy instanceof AssignmentProxy) {
            processor.handleAssignment((AssignmentProxy) proxy);
            return;
        }
        if (proxy instanceof ApplianceProxy) {
            processor.handleAppliance((ApplianceProxy) proxy);
            return;
        }
        if (proxy instanceof AnswerProxy) {
            processor.handleAnswer((AnswerProxy) proxy);
            return;
        }
        if (proxy instanceof AnswerCheckListCriteriaProxy) {
            processor.handleAnswerCheckListCriteria((AnswerCheckListCriteriaProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisFormProxy) {
            processor.handleAnamnesisForm((AnamnesisFormProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisCheckTitleProxy) {
            processor.handleAnamnesisCheckTitle((AnamnesisCheckTitleProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisChecksValueProxy) {
            processor.handleAnamnesisChecksValue((AnamnesisChecksValueProxy) proxy);
            return;
        }
        if (proxy instanceof AnamnesisCheckProxy) {
            processor.handleAnamnesisCheck((AnamnesisCheckProxy) proxy);
            return;
        }
        if (proxy instanceof AdvancedSearchCriteriaProxy) {
            processor.handleAdvancedSearchCriteria((AdvancedSearchCriteriaProxy) proxy);
            return;
        }
        if (proxy instanceof AdministratorProxy) {
            processor.handleAdministrator((AdministratorProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleUsedMaterial(UsedMaterialProxy proxy);

    public abstract void handleTrainingSuggestion(TrainingSuggestionProxy proxy);

    public abstract void handleTraining(TrainingProxy proxy);

    public abstract void handleTrainingDate(TrainingDateProxy proxy);

    public abstract void handleTrainingBlock(TrainingBlockProxy proxy);

    public abstract void handleTopic(TopicProxy proxy);

    public abstract void handleTask(TaskProxy proxy);

    public abstract void handleStudent(StudentProxy proxy);

    public abstract void handleStudentOsces(StudentOscesProxy proxy);

    public abstract void handleStandardizedRole(StandardizedRoleProxy proxy);

    public abstract void handleStandardizedPatient(StandardizedPatientProxy proxy);

    public abstract void handleSpTrainingDate(SpTrainingDateProxy proxy);

    public abstract void handleSpTrainingBlock(SpTrainingBlockProxy proxy);

    public abstract void handleSpStandardizedPatient(SpStandardizedPatientProxy proxy);

    public abstract void handleSpSemester(SpSemesterProxy proxy);

    public abstract void handleSpScar(SpScarProxy proxy);

    public abstract void handleSpProfession(SpProfessionProxy proxy);

    public abstract void handleSPPortalPerson(SPPortalPersonProxy proxy);

    public abstract void handleSpPatientInSemester(SpPatientInSemesterProxy proxy);

    public abstract void handleSpOsceDate(SpOsceDateProxy proxy);

    public abstract void handleSpokenLanguage(SpokenLanguageProxy proxy);

    public abstract void handleSpNationality(SpNationalityProxy proxy);

    public abstract void handleSpEliminationCriterion(SpEliminationCriterionProxy proxy);

    public abstract void handleSpecialisation(SpecialisationProxy proxy);

    public abstract void handleSpBankaccount(SpBankaccountProxy proxy);

    public abstract void handleSpAnamnesisForm(SpAnamnesisFormProxy proxy);

    public abstract void handleSpAnamnesisCheckTitle(SpAnamnesisCheckTitleProxy proxy);

    public abstract void handleSpAnamnesisChecksValue(SpAnamnesisChecksValueProxy proxy);

    public abstract void handleSpAnamnesisCheck(SpAnamnesisCheckProxy proxy);

    public abstract void handleSkill(SkillProxy proxy);

    public abstract void handleSkillLevel(SkillLevelProxy proxy);

    public abstract void handleSkillHasAppliance(SkillHasApplianceProxy proxy);

    public abstract void handleSimpleSearchCriteria(SimpleSearchCriteriaProxy proxy);

    public abstract void handleSignature(SignatureProxy proxy);

    public abstract void handleSemester(SemesterProxy proxy);

    public abstract void handleScar(ScarProxy proxy);

    public abstract void handleRoom(RoomProxy proxy);

    public abstract void handleRoleTopic(RoleTopicProxy proxy);

    public abstract void handleRoleTemplate(RoleTemplateProxy proxy);

    public abstract void handleRoleTableItemValue(RoleTableItemValueProxy proxy);

    public abstract void handleRoleTableItem(RoleTableItemProxy proxy);

    public abstract void handleRoleSubItemValue(RoleSubItemValueProxy proxy);

    public abstract void handleRoleParticipant(RoleParticipantProxy proxy);

    public abstract void handleRoleItemAccess(RoleItemAccessProxy proxy);

    public abstract void handleRoleBaseItem(RoleBaseItemProxy proxy);

    public abstract void handleProfession(ProfessionProxy proxy);

    public abstract void handlePostAnalysis(PostAnalysisProxy proxy);

    public abstract void handlePerson(PersonProxy proxy);

    public abstract void handlePatientInSemester(PatientInSemesterProxy proxy);

    public abstract void handlePatientInRole(PatientInRoleProxy proxy);

    public abstract void handleOsceSettings(OsceSettingsProxy proxy);

    public abstract void handleOsceSequence(OsceSequenceProxy proxy);

    public abstract void handleOsce(OsceProxy proxy);

    public abstract void handleOscePostRoom(OscePostRoomProxy proxy);

    public abstract void handleOscePost(OscePostProxy proxy);

    public abstract void handleOscePostBlueprint(OscePostBlueprintProxy proxy);

    public abstract void handleOsceDayRotation(OsceDayRotationProxy proxy);

    public abstract void handleOsceDay(OsceDayProxy proxy);

    public abstract void handleOsceDate(OsceDateProxy proxy);

    public abstract void handleOffice(OfficeProxy proxy);

    public abstract void handleNotes(NotesProxy proxy);

    public abstract void handleNationality(NationalityProxy proxy);

    public abstract void handleMinorSkill(MinorSkillProxy proxy);

    public abstract void handleMediaContentType(MediaContentTypeProxy proxy);

    public abstract void handleMediaContent(MediaContentProxy proxy);

    public abstract void handleMaterialList(MaterialListProxy proxy);

    public abstract void handleMainSkill(MainSkillProxy proxy);

    public abstract void handleMainClassification(MainClassificationProxy proxy);

    public abstract void handleLogEntry(LogEntryProxy proxy);

    public abstract void handleLangSkill(LangSkillProxy proxy);

    public abstract void handleKeyword(KeywordProxy proxy);

    public abstract void handleKeyPair(KeyPairProxy proxy);

    public abstract void handleItemAnalysis(ItemAnalysisProxy proxy);

    public abstract void handleFile(FileProxy proxy);

    public abstract void handleEliminationCriterion(EliminationCriterionProxy proxy);

    public abstract void handleDoctor(DoctorProxy proxy);

    public abstract void handleDescription(DescriptionProxy proxy);

    public abstract void handleCourse(CourseProxy proxy);

    public abstract void handleClinic(ClinicProxy proxy);

    public abstract void handleClassificationTopic(ClassificationTopicProxy proxy);

    public abstract void handleChecklistTopic(ChecklistTopicProxy proxy);

    public abstract void handleChecklistQuestion(ChecklistQuestionProxy proxy);

    public abstract void handleCheckList(CheckListProxy proxy);

    public abstract void handleChecklistOption(ChecklistOptionProxy proxy);

    public abstract void handleChecklistItem(ChecklistItemProxy proxy);

    public abstract void handleChecklistCriteria(ChecklistCriteriaProxy proxy);

    public abstract void handleBucketInformation(BucketInformationProxy proxy);

    public abstract void handleBankaccount(BankaccountProxy proxy);

    public abstract void handleAssignment(AssignmentProxy proxy);

    public abstract void handleAppliance(ApplianceProxy proxy);

    public abstract void handleAnswer(AnswerProxy proxy);

    public abstract void handleAnswerCheckListCriteria(AnswerCheckListCriteriaProxy proxy);

    public abstract void handleAnamnesisForm(AnamnesisFormProxy proxy);

    public abstract void handleAnamnesisCheckTitle(AnamnesisCheckTitleProxy proxy);

    public abstract void handleAnamnesisChecksValue(AnamnesisChecksValueProxy proxy);

    public abstract void handleAnamnesisCheck(AnamnesisCheckProxy proxy);

    public abstract void handleAdvancedSearchCriteria(AdvancedSearchCriteriaProxy proxy);

    public abstract void handleAdministrator(AdministratorProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
